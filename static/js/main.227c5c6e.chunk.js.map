{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAMaA,EAAO,SAAAC,GAAK,OAGrB,cAH4B,CAG5B,OAAKC,UAAU,iBAAf,UACI,qBAEIC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAK,YAIT,6BACKL,EAAMG,QAAQG,OAInB,4BACKN,EAAMG,QAAQI,YCnBdC,EAAW,SAAAR,GAAK,OAKzB,aAJJ,CAII,OAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAyBA,QAASA,GAArBA,EAAQC,UCRpBO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAGrB,aAH0D,CAG1D,SACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2CHG,G,wDA9Cb,aAAc,IAAD,8BACX,gBAiBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OACZA,EAASC,UAEVF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAS1C,WAAS,IAAD,SAC6BC,KAAKN,MAA/Bb,EADH,EACGA,SAAUU,EADb,EACaA,YAKbU,EAAmBpB,EAASqB,QAAO,SAAArB,GAAQ,OAAIA,EAASH,KAAKyB,cAAcC,SAASb,EAAYY,kBAEtG,OACE,sBAAK9B,UAAU,MAAf,UAEE,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAc,SAAAI,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,WAG1D,cAAC,EAAD,CAAUZ,SAAUoB,IAPtB,Y,GAjCYI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.227c5c6e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\n\r\n\r\nexport const Card = props => (  //new functional component\r\n    //takes properties from props in \r\n    \r\n    <div className='card-container'>\r\n        <img \r\n        \r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n            alt= 'monster' \r\n\r\n        />\r\n        \r\n        <h2> \r\n            {props.monster.name} \r\n            {/* get info from props and displays the name */}\r\n        </h2>\r\n\r\n        <p>\r\n            {props.monster.email}\r\n        </p>\r\n    </div>\r\n\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => (\r\n// export means it can be used in other areas\r\n// () means its a functional component\r\n// displays for now <div>... \r\n\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key = {monster.id} monster={monster}/>\r\n            //passes monster into the card component\r\n        ))}\r\n       \r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => ( //placeholder gets passed in as a prop\r\n    // handleChange is another prop that gets passed in as a function\r\n    \r\n    <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={placeholder} // we want placeholder to be a prop that gets passed in\r\n        onChange={handleChange} // {handleChange} AKA {e => this.setState({searchField: e.target.value})}\r\n\r\n    />\r\n\r\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n\nclass App extends Component { // the component is grabbed from the React Library at the top\n  constructor(){\n    super();\n\n    this.state = { //sets the default state\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users') // this accesses the data from the page\n    .then(response =>   // this grabs the body of the data\n      response.json())    // this returns the body of the data in a format of json file\n\n    .then(users => this.setState({monsters: users})); // this overrides the state above with\n    // json body data. Particularly the data under 'users'\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value});\n  };\n\n  \n  render(){\n    const  { monsters, searchField } = this.state;\n    // this const is also know as or equivalent to:\n    // const monsters = this.state.monsters;\n    // const searchField = this.state.searchField;\n\n    const filteredMonsters = monsters.filter(monsters => monsters.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        \n        <SearchBox\n          placeholder='search monsters'\n          handleChange={e => this.setState({searchField: e.target.value})}\n        />\n\n        <CardList monsters={filteredMonsters}/>  {/* this will pass the data from the state*/} \n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}